{"version":3,"file":"static/js/411.7d81af8d.chunk.js","mappings":"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","sources":["pages/dashboradGuest/Audio/handleSpeak.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nconst TextToSpeech = () => {\r\n    const [text, setText] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [audioUrl, setAudioUrl] = useState('');\r\n    const [voices, setVoices] = useState([]);\r\n    const [selectedVoice, setSelectedVoice] = useState('en');\r\n\r\n    useEffect(() => {\r\n        // Fetch available voices on component mount\r\n        const fetchVoices = async () => {\r\n            try {\r\n                const response = await fetch('/api/voices');\r\n                if (response.ok) {\r\n                    const data = await response.json();\r\n                    setVoices(data.voices);\r\n                } else {\r\n                    throw new Error('Failed to fetch voices');\r\n                }\r\n            } catch (err) {\r\n                setError(err.message);\r\n            }\r\n        };\r\n\r\n        fetchVoices();\r\n    }, []);\r\n\r\n    const handleSpeak = async () => {\r\n        setIsLoading(true);\r\n        setError('');\r\n        try {\r\n            const response = await fetch('/api/text-to-speech', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ text, voice: selectedVoice }),\r\n            });\r\n\r\n            if (!response.ok) throw new Error('Failed to convert text to speech');\r\n\r\n            const blob = await response.blob();\r\n            const url = window.URL.createObjectURL(blob);\r\n            setAudioUrl(url);\r\n            const audio = new Audio(url);\r\n            audio.play();\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Free Text to Speech Converter - Convert Your Text to Speech Instantly</title>\r\n                <meta name=\"description\" content=\"Convert your text into speech instantly with our free text-to-speech tool. Experience seamless audio conversion.\" />\r\n            </Helmet>\r\n\r\n            <main className=\"max-w-3/4 h-full flex flex-col items-center min-h-screen p-2\">\r\n                <div className=\"container bg-white p-2 md:p-10 rounded-lg mx-auto flex-col\">\r\n                    <div className=\"max-w-2xl mx-auto mt-10 p-8 bg-gradient-to-br from-white-900 to-white-800 rounded-xl shadow-2xl\">\r\n                        <h1 className=\"text-4xl font-bold text-center mb-4 text-gray-800\">Text to Speech</h1>\r\n                        <p className=\"text-center text-gray-600 mb-8\">\r\n                            Convert your text into natural-sounding speech with our easy-to-use text-to-speech converter.\r\n                        </p>\r\n                        <div className=\"flex flex-col space-y-4\">\r\n                            {audioUrl && (\r\n                                <a href={audioUrl} download=\"speech.mp3\" className=\"mt-2 text-blue-500 hover:underline\">\r\n                                    Download Audio\r\n                                </a>\r\n                            )}\r\n                            <textarea\r\n                                value={text}\r\n                                onChange={(e) => setText(e.target.value)}\r\n                                placeholder=\"Enter text to convert to speech\"\r\n                                className=\"w-full p-2 border rounded-md h-40\"\r\n                            />\r\n                            <select\r\n                                value={selectedVoice}\r\n                                onChange={(e) => setSelectedVoice(e.target.value)}\r\n                                className=\"w-full p-2 border rounded-md\"\r\n                            >\r\n                                {voices.map((voice) => (\r\n                                    <option key={voice.code} value={voice.code}>\r\n                                        {voice.name}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                            <button\r\n                                onClick={handleSpeak}\r\n                                disabled={isLoading || !text}\r\n                                className=\"w-full bg-main-color hover:bg-blue-300 text-white font-bold py-2 px-4 rounded-lg disabled:opacity-50\"\r\n                            >\r\n                                {isLoading ? 'Converting...' : 'Speak'}\r\n                            </button>\r\n\r\n                            {error && <p className=\"text-red-500 mt-2 text-center\">{error}</p>}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"mt-10 max-w-2xl mx-auto text-center\">\r\n                        <h3 className=\"text-xl font-semibold mb-4 text-gray-800\">Instant Speech Conversion!</h3>\r\n                        <p className=\"text-gray-600 mb-4\">\r\n                            Our text-to-speech tool provides an effortless way to convert your text into speech. Simply enter your text and click 'Speak' to hear it in audio form.\r\n                        </p>\r\n                        <p className=\"text-gray-600\">\r\n                            For any assistance or inquiries, please <a href=\"mailto:javatp01@gmail.com\" className=\"text-blue-500 hover:underline\">contact us</a>. We're here to help!\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TextToSpeech;\r\n"],"names":["_useState","useState","_useState2","_slicedToArray","text","setText","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","_useState7","_useState8","audioUrl","setAudioUrl","_useState9","_useState10","voices","setVoices","_useState11","_useState12","selectedVoice","setSelectedVoice","useEffect","fetchVoices","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","wrap","_context","prev","next","fetch","sent","ok","json","Error","t0","message","stop","apply","arguments","handleSpeak","_ref2","_callee2","blob","url","_context2","method","headers","body","JSON","stringify","voice","window","URL","createObjectURL","Audio","play","finish","_jsxs","_Fragment","children","Helmet","_jsx","name","content","className","href","download","value","onChange","e","target","placeholder","map","code","onClick","disabled"],"sourceRoot":""}