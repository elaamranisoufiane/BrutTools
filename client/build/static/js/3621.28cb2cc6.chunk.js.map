{"version":3,"file":"static/js/3621.28cb2cc6.chunk.js","mappings":";0IAsCIA,EAgqBFC,oDAtsBEC,EAAYC,OAAOC,eACnBC,EAAsBF,OAAOG,sBAC7BC,EAAeJ,OAAOK,UAAUC,eAChCC,EAAeP,OAAOK,UAAUG,qBAChCC,EAAkB,SAACC,EAAKC,EAAKC,GAAK,OAAKD,KAAOD,EAAMX,EAAUW,EAAKC,EAAK,CAAEE,YAAY,EAAMC,cAAc,EAAMC,UAAU,EAAMH,MAAAA,IAAWF,EAAIC,GAAOC,CAAK,EAC3JI,EAAiB,SAACC,EAAGC,GACvB,IAAK,IAAIC,KAAQD,IAAMA,EAAI,CAAC,GACtBd,EAAagB,KAAKF,EAAGC,IACvBV,EAAgBQ,EAAGE,EAAMD,EAAEC,IAC/B,GAAIjB,EAAmB,KACkBmB,EADlBC,GAAAC,EAAAA,EAAAA,GACJrB,EAAoBgB,IAAE,IAAvC,IAAAI,EAAAE,MAAAH,EAAAC,EAAAG,KAAAC,MAAyC,CAAhCP,EAAIE,EAAAT,MACPL,EAAaa,KAAKF,EAAGC,IACvBV,EAAgBQ,EAAGE,EAAMD,EAAEC,GAC/B,CAAC,OAAAQ,GAAAL,EAAAM,EAAAD,EAAA,SAAAL,EAAAO,GAAA,EACH,OAAOZ,CACT,EACIa,EAAY,SAACC,EAAQC,GACvB,IAAIC,EAAS,CAAC,EACd,IAAK,IAAId,KAAQY,EACX3B,EAAagB,KAAKW,EAAQZ,IAASa,EAAQE,QAAQf,GAAQ,IAC7Dc,EAAOd,GAAQY,EAAOZ,IAC1B,GAAc,MAAVY,GAAkB7B,EAAmB,KACKiC,EADLC,GAAAb,EAAAA,EAAAA,GACtBrB,EAAoB6B,IAAO,IAA5C,IAAAK,EAAAZ,MAAAW,EAAAC,EAAAX,KAAAC,MAA8C,CAArCP,EAAIgB,EAAAvB,MACPoB,EAAQE,QAAQf,GAAQ,GAAKZ,EAAaa,KAAKW,EAAQZ,KACzDc,EAAOd,GAAQY,EAAOZ,GAC1B,CAAC,OAAAQ,GAAAS,EAAAR,EAAAD,EAAA,SAAAS,EAAAP,GAAA,EACH,OAAOI,CACT,GAYA,SAAEnC,GACA,IAAMuC,EAAO,WAMX,SAAAA,EAAYC,EAASC,EAAsBC,EAAeC,GAQxD,IAR6DC,EAAAA,EAAAA,GAAA,KAAAL,GAC7DM,KAAKL,QAAUA,EACfK,KAAKJ,qBAAuBA,EAG5BI,KAAKC,QAAU,GAEfD,KAAKE,WAAa,GACdP,EAAUD,EAAQS,aAAeR,EAAUD,EAAQU,YACrD,MAAM,IAAIC,WAAW,8BACvB,GAAIP,GAAO,GAAKA,EAAM,EACpB,MAAM,IAAIO,WAAW,2BACvBL,KAAKM,KAAiB,EAAVX,EAAc,GAE1B,IADA,IAAIY,EAAM,GACDC,EAAI,EAAGA,EAAIR,KAAKM,KAAME,IAC7BD,EAAIE,MAAK,GACX,IAAK,IAAID,EAAI,EAAGA,EAAIR,KAAKM,KAAME,IAC7BR,KAAKC,QAAQQ,KAAKF,EAAIG,SACtBV,KAAKE,WAAWO,KAAKF,EAAIG,SAE3BV,KAAKW,uBACL,IAAMC,EAAeZ,KAAKa,oBAAoBhB,GAE9C,GADAG,KAAKc,cAAcF,IACP,GAARd,EAEF,IADA,IAAIiB,EAAa,IACRP,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1BR,KAAKgB,UAAUR,GACfR,KAAKiB,eAAeT,GACpB,IAAMU,EAAUlB,KAAKmB,kBACjBD,EAAUH,IACZjB,EAAMU,EACNO,EAAaG,GAEflB,KAAKgB,UAAUR,EACjB,CAEFY,EAAO,GAAKtB,GAAOA,GAAO,GAC1BE,KAAKqB,KAAOvB,EACZE,KAAKgB,UAAUlB,GACfE,KAAKiB,eAAenB,GACpBE,KAAKE,WAAa,EACpB,CA2ZC,OArZDoB,EAAAA,EAAAA,GAAA5B,EAAA,EAAA1B,IAAA,YAAAC,MAmEA,SAAUsD,EAAGC,GACX,OAAO,GAAKD,GAAKA,EAAIvB,KAAKM,MAAQ,GAAKkB,GAAKA,EAAIxB,KAAKM,MAAQN,KAAKC,QAAQuB,GAAGD,EAC/E,GACA,CAAAvD,IAAA,aAAAC,MACA,WACE,OAAO+B,KAAKC,OACd,GAEA,CAAAjC,IAAA,uBAAAC,MACA,WACE,IAAK,IAAIuC,EAAI,EAAGA,EAAIR,KAAKM,KAAME,IAC7BR,KAAKyB,kBAAkB,EAAGjB,EAAGA,EAAI,GAAK,GACtCR,KAAKyB,kBAAkBjB,EAAG,EAAGA,EAAI,GAAK,GAExCR,KAAK0B,kBAAkB,EAAG,GAC1B1B,KAAK0B,kBAAkB1B,KAAKM,KAAO,EAAG,GACtCN,KAAK0B,kBAAkB,EAAG1B,KAAKM,KAAO,GAGtC,IAFA,IAAMqB,EAAc3B,KAAK4B,+BACnBC,EAAWF,EAAYG,OACpBtB,EAAI,EAAGA,EAAIqB,EAAUrB,IAC5B,IAAK,IAAIuB,EAAI,EAAGA,EAAIF,EAAUE,IACjB,GAALvB,GAAe,GAALuB,GAAe,GAALvB,GAAUuB,GAAKF,EAAW,GAAKrB,GAAKqB,EAAW,GAAU,GAALE,GAC5E/B,KAAKgC,qBAAqBL,EAAYnB,GAAImB,EAAYI,IAG5D/B,KAAKiB,eAAe,GACpBjB,KAAKiC,aACP,GAEA,CAAAjE,IAAA,iBAAAC,MACA,SAAeoD,GAGb,IAFA,IAAMa,EAAOlC,KAAKJ,qBAAqBuC,YAAc,EAAId,EACrDe,EAAMF,EACD1B,EAAI,EAAGA,EAAI,GAAIA,IACtB4B,EAAMA,GAAO,EAAkB,MAAbA,IAAQ,GAC5B,IAAMC,EAA4B,OAApBH,GAAQ,GAAKE,GAC3BhB,EAAOiB,IAAS,IAAM,GACtB,IAAK,IAAI7B,EAAI,EAAGA,GAAK,EAAGA,IACtBR,KAAKyB,kBAAkB,EAAGjB,EAAG8B,EAAOD,EAAM7B,IAC5CR,KAAKyB,kBAAkB,EAAG,EAAGa,EAAOD,EAAM,IAC1CrC,KAAKyB,kBAAkB,EAAG,EAAGa,EAAOD,EAAM,IAC1CrC,KAAKyB,kBAAkB,EAAG,EAAGa,EAAOD,EAAM,IAC1C,IAAK,IAAI7B,EAAI,EAAGA,EAAI,GAAIA,IACtBR,KAAKyB,kBAAkB,GAAKjB,EAAG,EAAG8B,EAAOD,EAAM7B,IACjD,IAAK,IAAIA,EAAI,EAAGA,EAAI,EAAGA,IACrBR,KAAKyB,kBAAkBzB,KAAKM,KAAO,EAAIE,EAAG,EAAG8B,EAAOD,EAAM7B,IAC5D,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,IACtBR,KAAKyB,kBAAkB,EAAGzB,KAAKM,KAAO,GAAKE,EAAG8B,EAAOD,EAAM7B,IAC7DR,KAAKyB,kBAAkB,EAAGzB,KAAKM,KAAO,GAAG,EAC3C,GAEA,CAAAtC,IAAA,cAAAC,MACA,WACE,KAAI+B,KAAKL,QAAU,GAAnB,CAGA,IADA,IAAIyC,EAAMpC,KAAKL,QACNa,EAAI,EAAGA,EAAI,GAAIA,IACtB4B,EAAMA,GAAO,EAAmB,MAAdA,IAAQ,IAC5B,IAAMC,EAAOrC,KAAKL,SAAW,GAAKyC,EAClChB,EAAOiB,IAAS,IAAM,GACtB,IAAK,IAAI7B,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAM+B,EAAQD,EAAOD,EAAM7B,GACrBlC,EAAI0B,KAAKM,KAAO,GAAKE,EAAI,EACzBjC,EAAIiE,KAAKC,MAAMjC,EAAI,GACzBR,KAAKyB,kBAAkBnD,EAAGC,EAAGgE,GAC7BvC,KAAKyB,kBAAkBlD,EAAGD,EAAGiE,EAC/B,CAZQ,CAaV,GAEA,CAAAvE,IAAA,oBAAAC,MACA,SAAkBsD,EAAGC,GACnB,IAAK,IAAIkB,GAAM,EAAGA,GAAM,EAAGA,IACzB,IAAK,IAAIC,GAAM,EAAGA,GAAM,EAAGA,IAAM,CAC/B,IAAMC,EAAOJ,KAAKK,IAAIL,KAAKM,IAAIH,GAAKH,KAAKM,IAAIJ,IACvCK,EAAKxB,EAAIoB,EACTK,EAAKxB,EAAIkB,EACX,GAAKK,GAAMA,EAAK/C,KAAKM,MAAQ,GAAK0C,GAAMA,EAAKhD,KAAKM,MACpDN,KAAKyB,kBAAkBsB,EAAIC,EAAY,GAARJ,GAAqB,GAARA,EAChD,CAEJ,GAEA,CAAA5E,IAAA,uBAAAC,MACA,SAAqBsD,EAAGC,GACtB,IAAK,IAAIkB,GAAM,EAAGA,GAAM,EAAGA,IACzB,IAAK,IAAIC,GAAM,EAAGA,GAAM,EAAGA,IACzB3C,KAAKyB,kBAAkBF,EAAIoB,EAAInB,EAAIkB,EAA4C,GAAxCF,KAAKK,IAAIL,KAAKM,IAAIH,GAAKH,KAAKM,IAAIJ,IAE7E,GAEA,CAAA1E,IAAA,oBAAAC,MACA,SAAkBsD,EAAGC,EAAGyB,GACtBjD,KAAKC,QAAQuB,GAAGD,GAAK0B,EACrBjD,KAAKE,WAAWsB,GAAGD,IAAK,CAC1B,GAGA,CAAAvD,IAAA,sBAAAC,MACA,SAAoBiE,GAClB,IAAMgB,EAAMlD,KAAKL,QACXwD,EAAMnD,KAAKJ,qBACjB,GAAIsC,EAAKJ,QAAUpC,EAAQ0D,oBAAoBF,EAAKC,GAClD,MAAM,IAAI9C,WAAW,oBAQvB,IAPA,IAAMgD,EAAY3D,EAAQ4D,4BAA4BH,EAAII,SAASL,GAC7DM,EAAc9D,EAAQ+D,wBAAwBN,EAAII,SAASL,GAC3DQ,EAAelB,KAAKC,MAAM/C,EAAQiE,qBAAqBT,GAAO,GAC9DU,EAAiBP,EAAYK,EAAeL,EAC5CQ,EAAgBrB,KAAKC,MAAMiB,EAAeL,GAC5CS,EAAS,GACPC,EAAQrE,EAAQsE,0BAA0BR,GACvChD,EAAI,EAAGyD,EAAI,EAAGzD,EAAI6C,EAAW7C,IAAK,CACzC,IAAI0D,EAAMhC,EAAKxB,MAAMuD,EAAGA,EAAIJ,EAAgBL,GAAehD,EAAIoD,EAAiB,EAAI,IACpFK,GAAKC,EAAIpC,OACT,IAAMqC,EAAMzE,EAAQ0E,4BAA4BF,EAAKH,GACjDvD,EAAIoD,GACNM,EAAIzD,KAAK,GACXqD,EAAOrD,KAAKyD,EAAIG,OAAOF,GACzB,CAEA,IADA,IAAIG,EAAS,GAAGC,EAAA,SAAAC,GAEdV,EAAOW,SAAQ,SAACC,EAAO3C,IACjBvB,GAAKqD,EAAgBL,GAAezB,GAAK6B,IAC3CU,EAAO7D,KAAKiE,EAAMlE,GACtB,GACF,EALSA,EAAI,EAAGA,EAAIsD,EAAO,GAAGhC,OAAQtB,IAAG+D,EAAAC,GAOzC,OADApD,EAAOkD,EAAOxC,QAAU4B,GACjBY,CACT,GAEA,CAAAtG,IAAA,gBAAAC,MACA,SAAciE,GACZ,GAAIA,EAAKJ,QAAUU,KAAKC,MAAM/C,EAAQiE,qBAAqB3D,KAAKL,SAAW,GACzE,MAAM,IAAIU,WAAW,oBAEvB,IADA,IAAIG,EAAI,EACCmE,EAAQ3E,KAAKM,KAAO,EAAGqE,GAAS,EAAGA,GAAS,EAAG,CACzC,GAATA,IACFA,EAAQ,GACV,IAAK,IAAIC,EAAO,EAAGA,EAAO5E,KAAKM,KAAMsE,IACnC,IAAK,IAAI7C,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMR,EAAIoD,EAAQ5C,EAEZP,EAD4B,IAAlBmD,EAAQ,EAAI,GACT3E,KAAKM,KAAO,EAAIsE,EAAOA,GACrC5E,KAAKE,WAAWsB,GAAGD,IAAMf,EAAkB,EAAd0B,EAAKJ,SACrC9B,KAAKC,QAAQuB,GAAGD,GAAKe,EAAOJ,EAAK1B,IAAM,GAAI,GAAS,EAAJA,IAChDA,IAEJ,CAEJ,CACAY,EAAOZ,GAAmB,EAAd0B,EAAKJ,OACnB,GAKA,CAAA9D,IAAA,YAAAC,MACA,SAAUoD,GACR,GAAIA,EAAO,GAAKA,EAAO,EACrB,MAAM,IAAIhB,WAAW,2BACvB,IAAK,IAAImB,EAAI,EAAGA,EAAIxB,KAAKM,KAAMkB,IAC7B,IAAK,IAAID,EAAI,EAAGA,EAAIvB,KAAKM,KAAMiB,IAAK,CAClC,IAAIsD,OAAM,EACV,OAAQxD,GACN,KAAK,EACHwD,GAAUtD,EAAIC,GAAK,GAAK,EACxB,MACF,KAAK,EACHqD,EAASrD,EAAI,GAAK,EAClB,MACF,KAAK,EACHqD,EAAStD,EAAI,GAAK,EAClB,MACF,KAAK,EACHsD,GAAUtD,EAAIC,GAAK,GAAK,EACxB,MACF,KAAK,EACHqD,GAAUrC,KAAKC,MAAMlB,EAAI,GAAKiB,KAAKC,MAAMjB,EAAI,IAAM,GAAK,EACxD,MACF,KAAK,EACHqD,EAAStD,EAAIC,EAAI,EAAID,EAAIC,EAAI,GAAK,EAClC,MACF,KAAK,EACHqD,GAAUtD,EAAIC,EAAI,EAAID,EAAIC,EAAI,GAAK,GAAK,EACxC,MACF,KAAK,EACHqD,IAAWtD,EAAIC,GAAK,EAAID,EAAIC,EAAI,GAAK,GAAK,EAC1C,MACF,QACE,MAAM,IAAIsD,MAAM,gBAEf9E,KAAKE,WAAWsB,GAAGD,IAAMsD,IAC5B7E,KAAKC,QAAQuB,GAAGD,IAAMvB,KAAKC,QAAQuB,GAAGD,GAC1C,CAEJ,GAEA,CAAAvD,IAAA,kBAAAC,MACA,WAEE,IADA,IAAIqG,EAAS,EACJ9C,EAAI,EAAGA,EAAIxB,KAAKM,KAAMkB,IAAK,CAIlC,IAHA,IAAIuD,GAAW,EACXC,EAAO,EACPC,EAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3B1D,EAAI,EAAGA,EAAIvB,KAAKM,KAAMiB,IACzBvB,KAAKC,QAAQuB,GAAGD,IAAMwD,EAEZ,KADZC,EAEEV,GAAU5E,EAAQwF,WACXF,EAAO,GACdV,KAEFtE,KAAKmF,wBAAwBH,EAAMC,GAC9BF,IACHT,GAAUtE,KAAKoF,2BAA2BH,GAAcvF,EAAQ2F,YAClEN,EAAW/E,KAAKC,QAAQuB,GAAGD,GAC3ByD,EAAO,GAGXV,GAAUtE,KAAKsF,+BAA+BP,EAAUC,EAAMC,GAAcvF,EAAQ2F,UACtF,CACA,IAAK,IAAI9D,EAAI,EAAGA,EAAIvB,KAAKM,KAAMiB,IAAK,CAIlC,IAHA,IAAIwD,GAAW,EACXQ,EAAO,EACPN,EAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAC3BzD,EAAI,EAAGA,EAAIxB,KAAKM,KAAMkB,IACzBxB,KAAKC,QAAQuB,GAAGD,IAAMwD,EAEZ,KADZQ,EAEEjB,GAAU5E,EAAQwF,WACXK,EAAO,GACdjB,KAEFtE,KAAKmF,wBAAwBI,EAAMN,GAC9BF,IACHT,GAAUtE,KAAKoF,2BAA2BH,GAAcvF,EAAQ2F,YAClEN,EAAW/E,KAAKC,QAAQuB,GAAGD,GAC3BgE,EAAO,GAGXjB,GAAUtE,KAAKsF,+BAA+BP,EAAUQ,EAAMN,GAAcvF,EAAQ2F,UACtF,CACA,IAAK,IAAI7D,EAAI,EAAGA,EAAIxB,KAAKM,KAAO,EAAGkB,IACjC,IAAK,IAAID,EAAI,EAAGA,EAAIvB,KAAKM,KAAO,EAAGiB,IAAK,CACtC,IAAMgB,EAAQvC,KAAKC,QAAQuB,GAAGD,GAC1BgB,GAASvC,KAAKC,QAAQuB,GAAGD,EAAI,IAAMgB,GAASvC,KAAKC,QAAQuB,EAAI,GAAGD,IAAMgB,GAASvC,KAAKC,QAAQuB,EAAI,GAAGD,EAAI,KACzG+C,GAAU5E,EAAQ8F,WACtB,CAEF,IAC8BC,EAD1BC,EAAO,EAAEC,GAAA/G,EAAAA,EAAAA,GACKoB,KAAKC,SAAO,IAA9B,IAAA0F,EAAA9G,MAAA4G,EAAAE,EAAA7G,KAAAC,MACE,CAAA2G,EADYD,EAAAxH,MACD2H,QAAO,SAACC,EAAKtD,GAAK,OAAKsD,GAAOtD,EAAQ,EAAI,EAAE,GAAEmD,EAAK,CAAC,OAAA1G,GAAA2G,EAAA1G,EAAAD,EAAA,SAAA2G,EAAAzG,GAAA,CACjE,IAAM4G,EAAQ9F,KAAKM,KAAON,KAAKM,KACzB2D,EAAIzB,KAAKuD,KAAKvD,KAAKM,IAAW,GAAP4C,EAAoB,GAARI,GAAcA,GAAS,EAIhE,OAHA1E,EAAO,GAAK6C,GAAKA,GAAK,GAEtB7C,EAAO,IADPkD,GAAUL,EAAIvE,EAAQsG,aACA1B,GAAU,SACzBA,CACT,GAIA,CAAAtG,IAAA,+BAAAC,MACA,WACE,GAAoB,GAAhB+B,KAAKL,QACP,MAAO,GAKP,IAHA,IAAMkC,EAAWW,KAAKC,MAAMzC,KAAKL,QAAU,GAAK,EAC1CsG,EAAuB,IAAhBjG,KAAKL,QAAgB,GAA8D,EAAzD6C,KAAKuD,MAAqB,EAAf/F,KAAKL,QAAc,IAAiB,EAAXkC,EAAe,IACtFyC,EAAS,CAAC,GACL4B,EAAMlG,KAAKM,KAAO,EAAGgE,EAAOxC,OAASD,EAAUqE,GAAOD,EAC7D3B,EAAO6B,OAAO,EAAG,EAAGD,GACtB,OAAO5B,CAEX,GAGA,CAAAtG,IAAA,6BAAAC,MAiEA,SAA2BgH,GACzB,IAAMnG,EAAImG,EAAW,GACrB7D,EAAOtC,GAAiB,EAAZkB,KAAKM,MACjB,IAAM8F,EAAOtH,EAAI,GAAKmG,EAAW,IAAMnG,GAAKmG,EAAW,IAAU,EAAJnG,GAASmG,EAAW,IAAMnG,GAAKmG,EAAW,IAAMnG,EAC7G,OAAQsH,GAAQnB,EAAW,IAAU,EAAJnG,GAASmG,EAAW,IAAMnG,EAAI,EAAI,IAAMsH,GAAQnB,EAAW,IAAU,EAAJnG,GAASmG,EAAW,IAAMnG,EAAI,EAAI,EACtI,GACA,CAAAd,IAAA,iCAAAC,MACA,SAA+BoI,EAAiBC,EAAkBrB,GAOhE,OANIoB,IACFrG,KAAKmF,wBAAwBmB,EAAkBrB,GAC/CqB,EAAmB,GAErBA,GAAoBtG,KAAKM,KACzBN,KAAKmF,wBAAwBmB,EAAkBrB,GACxCjF,KAAKoF,2BAA2BH,EACzC,GACA,CAAAjH,IAAA,0BAAAC,MACA,SAAwBqI,EAAkBrB,GACnB,GAAjBA,EAAW,KACbqB,GAAoBtG,KAAKM,MAC3B2E,EAAWsB,MACXtB,EAAWuB,QAAQF,EACrB,IAAC,EAAAtI,IAAA,aAAAC,MA7aD,SAAkBwI,EAAMtD,GACtB,IAAMuD,EAAOvJ,EAAWwJ,UAAUC,aAAaH,GAC/C,OAAO/G,EAAQmH,eAAeH,EAAMvD,EACtC,GAIA,CAAAnF,IAAA,eAAAC,MACA,SAAoBiE,EAAMiB,GACxB,IAAM2D,EAAM3J,EAAWwJ,UAAUI,UAAU7E,GAC3C,OAAOxC,EAAQmH,eAAe,CAACC,GAAM3D,EACvC,GAUA,CAAAnF,IAAA,iBAAAC,MACA,SAAsByI,EAAMvD,GAAkE,IAGxFxD,EACAqH,EAJ2BC,EAAUC,UAAApF,OAAA,QAAAqF,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAAGE,EAAUF,UAAApF,OAAA,QAAAqF,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAAI7F,EAAI6F,UAAApF,OAAA,QAAAqF,IAAAD,UAAA,GAAAA,UAAA,IAAI,EAAGG,IAAQH,UAAApF,OAAA,QAAAqF,IAAAD,UAAA,KAAAA,UAAA,GACnF,KAAMxH,EAAQS,aAAe8G,GAAcA,GAAcG,GAAcA,GAAc1H,EAAQU,cAAgBiB,GAAQ,GAAKA,EAAO,EAC/H,MAAM,IAAIhB,WAAW,iBAGvB,IAAKV,EAAUsH,GAActH,IAAW,CACtC,IAAM2H,EAAgE,EAA5C5H,EAAQ0D,oBAAoBzD,EAASwD,GACzDoE,EAAWZ,EAAUa,aAAad,EAAM/G,GAC9C,GAAI4H,GAAYD,EAAmB,CACjCN,EAAeO,EACf,KACF,CACA,GAAI5H,GAAWyH,EACb,MAAM,IAAI/G,WAAW,gBACzB,CACA,IAAK,IAALoH,EAAA,EAAAC,EAAqB,CAAChI,EAAQiI,IAAIC,OAAQlI,EAAQiI,IAAIE,SAAUnI,EAAQiI,IAAIG,MAAKL,EAAAC,EAAA5F,OAAA2F,IAAE,CAA9E,IAAMM,EAAML,EAAAD,GACXJ,GAAYL,GAA+D,EAA/CtH,EAAQ0D,oBAAoBzD,EAASoI,KACnE5E,EAAM4E,EACV,CACA,IACsBC,EADlBC,EAAK,GAAGC,GAAAtJ,EAAAA,EAAAA,GACM8H,GAAI,IAAtB,IAAAwB,EAAArJ,MAAAmJ,EAAAE,EAAApJ,KAAAC,MAAwB,KAAb+H,EAAGkB,EAAA/J,MACZkK,EAAWrB,EAAIsB,KAAKC,SAAU,EAAGJ,GACjCE,EAAWrB,EAAIwB,SAAUxB,EAAIsB,KAAKG,iBAAiB5I,GAAUsI,GAAI,IACpCO,EADoCC,GAAA7J,EAAAA,EAAAA,GACjDkI,EAAI4B,WAAS,IAA7B,IAAAD,EAAA5J,MAAA2J,EAAAC,EAAA3J,KAAAC,MACE,KADSR,EAACiK,EAAAvK,MACVgK,EAAGxH,KAAKlC,EAAE,CAAC,OAAAS,GAAAyJ,EAAAxJ,EAAAD,EAAA,SAAAyJ,EAAAvJ,GAAA,CACf,CAAC,OAAAF,GAAAkJ,EAAAjJ,EAAAD,EAAA,SAAAkJ,EAAAhJ,GAAA,CACDkC,EAAO6G,EAAGnG,QAAUkF,GACpB,IAAM2B,EAA+D,EAA5CjJ,EAAQ0D,oBAAoBzD,EAASwD,GAC9D/B,EAAO6G,EAAGnG,QAAU6G,GACpBR,EAAW,EAAG3F,KAAKoG,IAAI,EAAGD,EAAmBV,EAAGnG,QAASmG,GACzDE,EAAW,GAAI,EAAIF,EAAGnG,OAAS,GAAK,EAAGmG,GACvC7G,EAAO6G,EAAGnG,OAAS,GAAK,GACxB,IAAK,IAAI+G,EAAU,IAAKZ,EAAGnG,OAAS6G,EAAkBE,GAAW,IAC/DV,EAAWU,EAAS,EAAGZ,GAEzB,IADA,IAAIpI,EAAgB,GACU,EAAvBA,EAAciC,OAAamG,EAAGnG,QACnCjC,EAAcY,KAAK,GAErB,OADAwH,EAAGxD,SAAQ,SAAClG,EAAGiC,GAAC,OAAKX,EAAcW,IAAM,IAAMjC,GAAK,GAAS,EAAJiC,EAAM,IACxD,IAAId,EAAQC,EAASwD,EAAKtD,EAAewB,EAClD,GAAC,CAAArD,IAAA,uBAAAC,MA0RD,SAA4BiF,GAC1B,GAAIA,EAAMxD,EAAQS,aAAe+C,EAAMxD,EAAQU,YAC7C,MAAM,IAAIC,WAAW,+BACvB,IAAIiE,GAAU,GAAKpB,EAAM,KAAOA,EAAM,GACtC,GAAIA,GAAO,EAAG,CACZ,IAAMrB,EAAWW,KAAKC,MAAMS,EAAM,GAAK,EACvCoB,IAAW,GAAKzC,EAAW,IAAMA,EAAW,GACxCqB,GAAO,IACToB,GAAU,GACd,CAEA,OADAlD,EAAO,KAAOkD,GAAUA,GAAU,OAC3BA,CACT,GAGA,CAAAtG,IAAA,sBAAAC,MACA,SAA2BiF,EAAKC,GAC9B,OAAOX,KAAKC,MAAM/C,EAAQiE,qBAAqBT,GAAO,GAAKxD,EAAQ+D,wBAAwBN,EAAII,SAASL,GAAOxD,EAAQ4D,4BAA4BH,EAAII,SAASL,EAClK,GAEA,CAAAlF,IAAA,4BAAAC,MACA,SAAiC6K,GAC/B,GAAIA,EAAS,GAAKA,EAAS,IACzB,MAAM,IAAIzI,WAAW,uBAEvB,IADA,IAAIiE,EAAS,GACJ9D,EAAI,EAAGA,EAAIsI,EAAS,EAAGtI,IAC9B8D,EAAO7D,KAAK,GACd6D,EAAO7D,KAAK,GAEZ,IADA,IAAIsI,EAAO,EACFvI,EAAI,EAAGA,EAAIsI,EAAQtI,IAAK,CAC/B,IAAK,IAAIuB,EAAI,EAAGA,EAAIuC,EAAOxC,OAAQC,IACjCuC,EAAOvC,GAAKrC,EAAQsJ,oBAAoB1E,EAAOvC,GAAIgH,GAC/ChH,EAAI,EAAIuC,EAAOxC,SACjBwC,EAAOvC,IAAMuC,EAAOvC,EAAI,IAE5BgH,EAAOrJ,EAAQsJ,oBAAoBD,EAAM,EAC3C,CACA,OAAOzE,CACT,GACA,CAAAtG,IAAA,8BAAAC,MACA,SAAmCiE,EAAM+G,GACvC,IACoBC,EADhB5E,EAAS2E,EAAQE,KAAI,SAACC,GAAC,OAAK,CAAC,IAAEC,GAAAzK,EAAAA,EAAAA,GACnBsD,GAAI,QAAAoH,EAAA,WAAE,IACdC,EADIL,EAAAjL,MACSqG,EAAOkF,QAC1BlF,EAAO7D,KAAK,GACZwI,EAAQxE,SAAQ,SAACgF,EAAMjJ,GAAC,OAAK8D,EAAO9D,IAAMd,EAAQsJ,oBAAoBS,EAAMF,EAAO,GACrF,EAJA,IAAAF,EAAAxK,MAAAqK,EAAAG,EAAAvK,KAAAC,MAAAuK,GAIC,OAAAtK,GAAAqK,EAAApK,EAAAD,EAAA,SAAAqK,EAAAnK,GAAA,CACD,OAAOoF,CACT,GAEA,CAAAtG,IAAA,sBAAAC,MACA,SAA2BsD,EAAGC,GAC5B,GAAID,IAAM,GAAK,GAAKC,IAAM,GAAK,EAC7B,MAAM,IAAInB,WAAW,qBAEvB,IADA,IAAIqJ,EAAI,EACClJ,EAAI,EAAGA,GAAK,EAAGA,IACtBkJ,EAAIA,GAAK,EAAgB,KAAXA,IAAM,GACpBA,IAAMlI,IAAMhB,EAAI,GAAKe,EAGvB,OADAH,EAAOsI,IAAM,GAAK,GACXA,CACT,KAAChK,CAAA,CA1cU,GAuebA,EAAQS,YAAc,EAEtBT,EAAQU,YAAc,GAEtBV,EAAQwF,WAAa,EACrBxF,EAAQ8F,WAAa,EACrB9F,EAAQ2F,WAAa,GACrB3F,EAAQsG,WAAa,GACrBtG,EAAQ+D,wBAA0B,CAGhC,EAAE,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAEhK,EAAE,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAEjK,EAAE,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAEjK,EAAE,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAGnK/D,EAAQ4D,4BAA8B,CAGpC,EAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAE1I,EAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAEnJ,EAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAEtJ,EAAE,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAKzJ,SAAS6E,EAAWwB,EAAKC,EAAK3B,GAC5B,GAAI2B,EAAM,GAAKA,EAAM,IAAMD,IAAQC,GAAO,EACxC,MAAM,IAAIvJ,WAAW,sBACvB,IAAK,IAAIG,EAAIoJ,EAAM,EAAGpJ,GAAK,EAAGA,IAC5ByH,EAAGxH,KAAKkJ,IAAQnJ,EAAI,EACxB,CACA,SAAS8B,EAAOf,EAAGf,GACjB,OAAwB,IAAhBe,IAAMf,EAAI,EACpB,CACA,SAASY,EAAOyI,GACd,IAAKA,EACH,MAAM,IAAI/E,MAAM,kBACpB,CAbA3H,EAAW2M,OAASpK,EAcpB,IAAMqK,EAAU,WAKd,SAAAA,EAAY3B,EAAME,EAAU0B,GAI1B,IAJmCjK,EAAAA,EAAAA,GAAA,KAAAgK,GACnC/J,KAAKoI,KAAOA,EACZpI,KAAKsI,SAAWA,EAChBtI,KAAKgK,QAAUA,EACX1B,EAAW,EACb,MAAM,IAAIjI,WAAW,oBACvBL,KAAKgK,QAAUA,EAAQtJ,OACzB,CA+GC,OA3GDY,EAAAA,EAAAA,GAAAyI,EAAA,EAAA/L,IAAA,UAAAC,MA+EA,WACE,OAAO+B,KAAKgK,QAAQtJ,OACtB,IAEA,EAAA1C,IAAA,YAAAC,MAlFA,SAAiBiE,GACf,IACoB+H,EADhBhC,EAAK,GAAGiC,GAAAtL,EAAAA,EAAAA,GACIsD,GAAI,IAApB,IAAAgI,EAAArL,MAAAoL,EAAAC,EAAApL,KAAAC,MACE,CAAAoJ,EADU8B,EAAAhM,MACI,EAAGgK,EAAG,CAAC,OAAAjJ,GAAAkL,EAAAjL,EAAAD,EAAA,SAAAkL,EAAAhL,GAAA,CACvB,OAAO,IAAI6K,EAAWA,EAAWI,KAAKC,KAAMlI,EAAKJ,OAAQmG,EAC3D,GACA,CAAAjK,IAAA,cAAAC,MACA,SAAmBoM,GACjB,IAAKN,EAAWO,UAAUD,GACxB,MAAM,IAAIhK,WAAW,0CAEvB,IADA,IAAI4H,EAAK,GACAzH,EAAI,EAAGA,EAAI6J,EAAOvI,QAAU,CACnC,IAAMhD,EAAI0D,KAAKoG,IAAIyB,EAAOvI,OAAStB,EAAG,GACtC2H,EAAWoC,SAASF,EAAOG,UAAUhK,EAAGA,EAAI1B,GAAI,IAAS,EAAJA,EAAQ,EAAGmJ,GAChEzH,GAAK1B,CACP,CACA,OAAO,IAAIiL,EAAWA,EAAWI,KAAKM,QAASJ,EAAOvI,OAAQmG,EAChE,GAGA,CAAAjK,IAAA,mBAAAC,MACA,SAAwBwI,GACtB,IAAKsD,EAAWW,eAAejE,GAC7B,MAAM,IAAIpG,WAAW,+DACvB,IACIG,EADAyH,EAAK,GAET,IAAKzH,EAAI,EAAGA,EAAI,GAAKiG,EAAK3E,OAAQtB,GAAK,EAAG,CACxC,IAAImK,EAAiE,GAA1DZ,EAAWa,qBAAqBrL,QAAQkH,EAAKoE,OAAOrK,IAE/D2H,EADAwC,GAAQZ,EAAWa,qBAAqBrL,QAAQkH,EAAKoE,OAAOrK,EAAI,IAC/C,GAAIyH,EACvB,CAGA,OAFIzH,EAAIiG,EAAK3E,QACXqG,EAAW4B,EAAWa,qBAAqBrL,QAAQkH,EAAKoE,OAAOrK,IAAK,EAAGyH,GAClE,IAAI8B,EAAWA,EAAWI,KAAKW,aAAcrE,EAAK3E,OAAQmG,EACnE,GAEA,CAAAjK,IAAA,eAAAC,MACA,SAAoBwI,GAClB,MAAY,IAARA,EACK,GACAsD,EAAWO,UAAU7D,GACrB,CAACsD,EAAWgB,YAAYtE,IACxBsD,EAAWW,eAAejE,GAC1B,CAACsD,EAAWiB,iBAAiBvE,IAE7B,CAACsD,EAAWhD,UAAUgD,EAAWkB,gBAAgBxE,IAC5D,GAEA,CAAAzI,IAAA,UAAAC,MACA,SAAeiN,GACb,IAAIjD,EAAK,GACT,GAAIiD,EAAY,EACd,MAAM,IAAI7K,WAAW,qCAClB,GAAI6K,EAAY,IACnB/C,EAAW+C,EAAW,EAAGjD,QACtB,GAAIiD,EAAY,MACnB/C,EAAW,EAAG,EAAGF,GACjBE,EAAW+C,EAAW,GAAIjD,OACrB,MAAIiD,EAAY,KAIrB,MAAM,IAAI7K,WAAW,qCAHrB8H,EAAW,EAAG,EAAGF,GACjBE,EAAW+C,EAAW,GAAIjD,EAE+B,CAC3D,OAAO,IAAI8B,EAAWA,EAAWI,KAAKgB,IAAK,EAAGlD,EAChD,GAEA,CAAAjK,IAAA,YAAAC,MACA,SAAiBwI,GACf,OAAOsD,EAAWqB,cAAcC,KAAK5E,EACvC,GAGA,CAAAzI,IAAA,iBAAAC,MACA,SAAsBwI,GACpB,OAAOsD,EAAWuB,mBAAmBD,KAAK5E,EAC5C,GAAC,CAAAzI,IAAA,eAAAC,MAQD,SAAoByI,EAAM/G,GACxB,IACsB4L,EADlBjH,EAAS,EAAEkH,GAAA5M,EAAAA,EAAAA,GACG8H,GAAI,IAAtB,IAAA8E,EAAA3M,MAAA0M,EAAAC,EAAA1M,KAAAC,MAAwB,KAAb+H,EAAGyE,EAAAtN,MACNwN,EAAS3E,EAAIsB,KAAKG,iBAAiB5I,GACzC,GAAImH,EAAIwB,UAAY,GAAKmD,EACvB,OAAOC,IACTpH,GAAU,EAAImH,EAAS3E,EAAIkD,QAAQlI,MACrC,CAAC,OAAA9C,GAAAwM,EAAAvM,EAAAD,EAAA,SAAAwM,EAAAtM,GAAA,CACD,OAAOoF,CACT,GACA,CAAAtG,IAAA,kBAAAC,MACA,SAAuB0N,GACrBA,EAAMC,UAAUD,GAEhB,IADA,IAAIrH,EAAS,GACJ9D,EAAI,EAAGA,EAAImL,EAAI7J,OAAQtB,IACT,KAAjBmL,EAAId,OAAOrK,GACb8D,EAAO7D,KAAKkL,EAAIE,WAAWrL,KAE3B8D,EAAO7D,KAAK8J,SAASoB,EAAInB,UAAUhK,EAAI,EAAGA,EAAI,GAAI,KAClDA,GAAK,GAGT,OAAO8D,CACT,KAACyF,CAAA,CA3Ha,GA+HhBA,EAAWqB,cAAgB,WAE3BrB,EAAWuB,mBAAqB,wBAGhCvB,EAAWa,qBAAuB,gDAClC,IAAIjE,EAAYoD,EAChB5M,EAAWwJ,UAAYoD,CACxB,CA9pBD,CA8pBG7M,IAAcA,EAAY,CAAC,IAG5B,SAAE4O,GACA,IAAMC,GAAIzK,EAAAA,EAAAA,IAGR,SAAAyK,EAAYxI,EAASpB,IAAYpC,EAAAA,EAAAA,GAAA,KAAAgM,GAC/B/L,KAAKuD,QAAUA,EACfvD,KAAKmC,WAAaA,CACpB,IAGF4J,EAAKC,IAAM,IAAID,EAAK,EAAG,GAEvBA,EAAKnE,OAAS,IAAImE,EAAK,EAAG,GAE1BA,EAAKlE,SAAW,IAAIkE,EAAK,EAAG,GAE5BA,EAAKjE,KAAO,IAAIiE,EAAK,EAAG,GAExBD,EAAQnE,IAAMoE,CACf,CAnBD,EAFA5O,EAsBCD,IAAcA,EAAY,CAAC,IADL4M,SAAW3M,EAAW2M,OAAS,CAAC,IAEzD,SAAE3M,IAEA,SAAE8O,GACA,IAAMC,EAAK,WAET,SAAAA,EAAY7D,EAAU8D,IAAkBpM,EAAAA,EAAAA,GAAA,KAAAmM,GACtClM,KAAKqI,SAAWA,EAChBrI,KAAKmM,iBAAmBA,CAC1B,CAMC,OAHD7K,EAAAA,EAAAA,GAAA4K,EAAA,EAAAlO,IAAA,mBAAAC,MACA,SAAiBiF,GACf,OAAOlD,KAAKmM,iBAAiB3J,KAAKC,OAAOS,EAAM,GAAK,IACtD,KAACgJ,CAAA,CAXQ,GAcXA,EAAMzB,QAAU,IAAIyB,EAAM,EAAG,CAAC,GAAI,GAAI,KACtCA,EAAMpB,aAAe,IAAIoB,EAAM,EAAG,CAAC,EAAG,GAAI,KAC1CA,EAAM9B,KAAO,IAAI8B,EAAM,EAAG,CAAC,EAAG,GAAI,KAClCA,EAAME,MAAQ,IAAIF,EAAM,EAAG,CAAC,EAAG,GAAI,KACnCA,EAAMf,IAAM,IAAIe,EAAM,EAAG,CAAC,EAAG,EAAG,IAEhCD,EAAW9B,KAAO+B,CACnB,CAtBD,CAsBe/O,EAAWwJ,YAAcxJ,EAAWwJ,UAAY,CAAC,GACjE,CAzBD,CAyBGzJ,IAAcA,EAAY,CAAC,IAC9B,IAAImP,EAAoBnP,EAQpBoP,EAAkB,CACpBC,EAAGF,EAAkBvC,OAAOnC,IAAIqE,IAChCQ,EAAGH,EAAkBvC,OAAOnC,IAAIC,OAChC6E,EAAGJ,EAAkBvC,OAAOnC,IAAIE,SAChC6E,EAAGL,EAAkBvC,OAAOnC,IAAIG,MAI9B6E,EAAkB,UAClBC,EAAkB,UAGlBC,EAAmB,EACnBC,EAAsB,EACtBC,EAAoB,GACxB,SAASC,EAAa/M,GAAqB,IAAZgN,EAAM/F,UAAApF,OAAA,QAAAqF,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAChCgG,EAAM,GA6BZ,OA5BAjN,EAAQwE,SAAQ,SAASlE,EAAKiB,GAC5B,IAAI2L,EAAQ,KACZ5M,EAAIkE,SAAQ,SAAS2I,EAAM7L,GACzB,IAAK6L,GAAkB,OAAVD,EAKX,OAJAD,EAAIzM,KAAK,IAAD4D,OACF8I,EAAQF,EAAM,KAAA5I,OAAI7C,EAAIyL,EAAM,KAAA5I,OAAI9C,EAAI4L,EAAK,OAAA9I,OAAM8I,EAAQF,EAAM,WAEnEE,EAAQ,MAGV,GAAI5L,IAAMhB,EAAIuB,OAAS,EAanBsL,GAAkB,OAAVD,IACVA,EAAQ5L,OAdV,CACE,IAAK6L,EACH,OAEY,OAAVD,EACFD,EAAIzM,KAAK,IAAD4D,OAAK9C,EAAI0L,EAAM,KAAA5I,OAAI7C,EAAIyL,EAAM,UAAA5I,OAAS9C,EAAI0L,EAAM,MAExDC,EAAIzM,KAAK,IAAD4D,OACF8I,EAAQF,EAAM,KAAA5I,OAAI7C,EAAIyL,EAAM,MAAA5I,OAAK9C,EAAI,EAAI4L,EAAK,OAAA9I,OAAM8I,EAAQF,EAAM,KAI5E,CAIF,GACF,IACOC,EAAIG,KAAK,GAClB,CACA,SAASC,EAAgBrN,EAASsN,GAChC,OAAOtN,EAAQS,QAAQyI,KAAI,SAAC5I,EAAKiB,GAC/B,OAAIA,EAAI+L,EAAW/L,GAAKA,GAAK+L,EAAW/L,EAAI+L,EAAWC,EAC9CjN,EAEFA,EAAI4I,KAAI,SAACiE,EAAM7L,GACpB,OAAIA,EAAIgM,EAAWhM,GAAKA,GAAKgM,EAAWhM,EAAIgM,EAAWE,IAC9CL,CAGX,GACF,GACF,CA8BA,SAASM,EAASC,GAQf,IAPD1P,EAAK0P,EAAL1P,MACA2P,EAAKD,EAALC,MACA3G,EAAU0G,EAAV1G,WACA4G,EAAaF,EAAbE,cACAC,EAAUH,EAAVG,WACAC,EAAaJ,EAAbI,cACAzN,EAAIqN,EAAJrN,KAEI0N,EAASC,EAAAA,SAAc,WACzB,IAAMC,EAAW7B,EAAkB1F,UAAUC,aAAa3I,GAC1D,OAAOoO,EAAkBvC,OAAOjD,eAC9BqH,EACA5B,EAAgBsB,GAChB3G,EAEJ,GAAG,CAAChJ,EAAO2P,EAAO3G,IAClBkH,EAA6DF,EAAAA,SAAc,WACzE,IAAIG,EAASJ,EAAOK,aACdC,EAzBV,SAAuBT,EAAeC,GACpC,OAAkB,MAAdA,EACKtL,KAAKK,IAAIL,KAAKC,MAAMqL,GAAa,GAEnCD,EAAgBhB,EAAmBC,CAC5C,CAoBoByB,CAAcV,EAAeC,GACvCU,EAAYJ,EAAOtM,OAAmB,EAAVwM,EAC5BG,EAlDV,SAA0BC,EAAOpO,EAAM2M,EAAQc,GAC7C,GAAqB,MAAjBA,EACF,OAAO,KAET,IAAMY,EAAWD,EAAM5M,OAAkB,EAATmL,EAC1B2B,EAAcpM,KAAKC,MAAMnC,EAAOyM,GAChC8B,EAAQF,EAAWrO,EACnBmN,GAAKM,EAAce,OAASF,GAAeC,EAC3CrB,GAAKO,EAAcgB,QAAUH,GAAeC,EAC5CtN,EAAuB,MAAnBwM,EAAcxM,EAAYmN,EAAM5M,OAAS,EAAI2L,EAAI,EAAIM,EAAcxM,EAAIsN,EAC3ErN,EAAuB,MAAnBuM,EAAcvM,EAAYkN,EAAM5M,OAAS,EAAI0L,EAAI,EAAIO,EAAcvM,EAAIqN,EAC3EG,EAAmC,MAAzBjB,EAAciB,QAAkB,EAAIjB,EAAciB,QAC9DzB,EAAa,KACjB,GAAIQ,EAAckB,SAAU,CAC1B,IAAIC,EAAS1M,KAAKC,MAAMlB,GACpB4N,EAAS3M,KAAKC,MAAMjB,GAGxB+L,EAAa,CAAEhM,EAAG2N,EAAQ1N,EAAG2N,EAAQ1B,EAFzBjL,KAAKuD,KAAK0H,EAAIlM,EAAI2N,GAEiB1B,EADnChL,KAAKuD,KAAKyH,EAAIhM,EAAI2N,GAEhC,CAEA,MAAO,CAAE5N,EAAAA,EAAGC,EAAAA,EAAGgM,EAAAA,EAAGC,EAAAA,EAAGF,WAAAA,EAAYyB,QAAAA,EAASI,YADtBrB,EAAcqB,YAEpC,CA4BqCC,CAC/BjB,EACA9N,EACAgO,EACAP,GAEF,MAAO,CACLW,MAAON,EACPnB,OAAQqB,EACRK,SAAUH,EACVc,wBAAyBb,EAE7B,GAAG,CAACT,EAAQ1N,EAAMyN,EAAeF,EAAeC,IAhBxCY,EAAKP,EAALO,MAAOzB,EAAMkB,EAANlB,OAAQ0B,EAAQR,EAARQ,SAAUW,EAAuBnB,EAAvBmB,wBAiBjC,MAAO,CACLtB,OAAAA,EACAf,OAAAA,EACAyB,MAAAA,EACAC,SAAAA,EACAW,wBAAAA,EAEJ,CACA,IAAIC,EAAkB,WACpB,KACE,IAAIC,QAASC,QAAQ,IAAID,OAC3B,CAAE,MAAOvQ,GACP,OAAO,CACT,CACA,OAAO,CACT,CAPsB,GAQHgP,EAAAA,YACjB,SAAuByB,EAAOC,GACtB,IAAAC,EAAKF,EACTzR,EASE2R,EATF3R,MAAK4R,EASHD,EARFtP,KAAAA,OAAI,IAAAuP,EAzIS,IAyIMA,EAAAC,EAQjBF,EAPFhC,MAAAA,OAAK,IAAAkC,EAzIS,IAyIOA,EAAAC,EAOnBH,EANFI,QAAAA,OAAO,IAAAD,EAAGpD,EAAeoD,EAAAE,EAMvBL,EALFM,QAAAA,OAAO,IAAAD,EAAGrD,EAAeqD,EAAAE,EAKvBP,EAJF/B,cAAAA,OAAa,IAAAsC,GAAwBA,EAAAC,EAInCR,EAHF3I,WAAAA,OAAU,IAAAmJ,EAzIS,EAyIYA,EAC/BtC,EAEE8B,EAFF9B,WACAC,EACE6B,EADF7B,cAYIsC,EAXelR,EAAUyQ,EAAI,CACjC,QACA,OACA,QACA,UACA,UACA,gBACA,aACA,aACA,kBAEuBU,EAAUD,EAAVC,MAAcC,EAAapR,EAAUkR,EAAI,CAAC,UAC7DG,EAA0B,MAAjBzC,OAAwB,EAASA,EAAc0C,IACxDC,EAAUzC,EAAAA,OAAa,MACvB0C,EAAS1C,EAAAA,OAAa,MACtB2C,EAAe3C,EAAAA,aACnB,SAAC4C,GACCH,EAAQI,QAAUD,EACU,oBAAjBlB,EACTA,EAAakB,GACJlB,IACTA,EAAamB,QAAUD,EAE3B,GACA,CAAClB,IAEHoB,EAAwC9C,EAAAA,UAAe,GAAM+C,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GAAzCG,GAAFF,EAAA,GAAkBA,EAAA,IACpCG,EAA6DzD,EAAU,CACrEzP,MAAAA,EACA2P,MAAAA,EACA3G,WAAAA,EACA4G,cAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAzN,KAAAA,IAPM2M,EAAMkE,EAANlE,OAAQyB,EAAKyC,EAALzC,MAAOC,EAAQwC,EAARxC,SAAUW,EAAuB6B,EAAvB7B,wBASjCrB,EAAAA,WAAgB,WACd,GAAuB,MAAnByC,EAAQI,QAAiB,CAC3B,IAAMM,EAASV,EAAQI,QACjBO,EAAMD,EAAOE,WAAW,MAC9B,IAAKD,EACH,OAEF,IAAIE,EAAc7C,EACZ8C,EAAQb,EAAOG,QACfW,EAA+C,MAA3BnC,GAA6C,OAAVkC,GAAkBA,EAAME,UAAoC,IAAxBF,EAAMG,eAA8C,IAAvBH,EAAMI,aAChIH,GACwC,MAAtCnC,EAAwB/B,aAC1BgE,EAAcjE,EACZoB,EACAY,EAAwB/B,aAI9B,IAAMsE,EAAaC,OAAOC,kBAAoB,EAC9CX,EAAOrC,OAASqC,EAAOtC,MAAQxO,EAAOuR,EACtC,IAAMhD,EAAQvO,EAAOqO,EAAWkD,EAChCR,EAAIxC,MAAMA,EAAOA,GACjBwC,EAAIW,UAAYhC,EAChBqB,EAAIY,SAAS,EAAG,EAAGtD,EAAUA,GAC7B0C,EAAIW,UAAY9B,EACZX,EACF8B,EAAIa,KAAK,IAAI1C,OAAOxC,EAAauE,EAAatE,KAE9CyB,EAAMjK,SAAQ,SAASlE,EAAK4R,GAC1B5R,EAAIkE,SAAQ,SAAS2I,EAAMgF,GACrBhF,GACFiE,EAAIY,SAASG,EAAMnF,EAAQkF,EAAMlF,EAAQ,EAAG,EAEhD,GACF,IAEEqC,IACF+B,EAAIgB,YAAc/C,EAAwBN,SAExCyC,GACFJ,EAAIiB,UACFd,EACAlC,EAAwB/N,EAAI0L,EAC5BqC,EAAwB9N,EAAIyL,EAC5BqC,EAAwB7B,EACxB6B,EAAwB9B,EAG9B,CACF,IACAS,EAAAA,WAAgB,WACdiD,GAAiB,EACnB,GAAG,CAACV,IACJ,IAAM+B,EAAclU,EAAe,CAAE0Q,OAAQzO,EAAMwO,MAAOxO,GAAQgQ,GAC9DkC,EAAM,KAgBV,OAfc,MAAVhC,IACFgC,EAAsBvE,EAAAA,cACpB,MACA,CACEwC,IAAKD,EACLxS,IAAKwS,EACLF,MAAO,CAAEmC,QAAS,QAClBC,OAAQ,WACNxB,GAAiB,EACnB,EACAyB,IAAKhC,EACLvB,YAAwC,MAA3BE,OAAkC,EAASA,EAAwBF,eAI/DnB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAsBA,EAAAA,cAC/E,SACA5P,EAAe,CACbiS,MAAOiC,EACPxD,OAAQzO,EACRwO,MAAOxO,EACPqS,IAAK/B,EACLgC,KAAM,OACLrC,IACFiC,EACL,IAEWK,YAAc,eAC3B,IAAIC,EAAY7E,EAAAA,YACd,SAAoByB,EAAOC,GACnB,IAAAC,EAAKF,EACTzR,EAUE2R,EAVF3R,MAAK8U,EAUHnD,EATFtP,KAAAA,OAAI,IAAAyS,EA5QS,IA4QMA,EAAAC,EASjBpD,EARFhC,MAAAA,OAAK,IAAAoF,EA5QS,IA4QOA,EAAAC,EAQnBrD,EAPFI,QAAAA,OAAO,IAAAiD,EAAGtG,EAAesG,EAAAC,EAOvBtD,EANFM,QAAAA,OAAO,IAAAgD,EAAGtG,EAAesG,EAAAC,EAMvBvD,EALF/B,cAAAA,OAAa,IAAAsF,GAAwBA,EAAAC,EAKnCxD,EAJF3I,WAAAA,OAAU,IAAAmM,EA5QS,EA4QYA,EAC/BC,EAGEzD,EAHFyD,MACAvF,EAEE8B,EAFF9B,WACAC,EACE6B,EADF7B,cACMwC,EAAapR,EAAUyQ,EAAI,CACjC,QACA,OACA,QACA,UACA,UACA,gBACA,aACA,QACA,aACA,kBAEF0D,EAA6D5F,EAAU,CACrEzP,MAAAA,EACA2P,MAAAA,EACA3G,WAAAA,EACA4G,cAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAzN,KAAAA,IAPM2M,EAAMqG,EAANrG,OAAQyB,EAAK4E,EAAL5E,MAAOC,EAAQ2E,EAAR3E,SAAUW,EAAuBgE,EAAvBhE,wBAS7BiC,EAAc7C,EACd8C,EAAQ,KACS,MAAjBzD,GAAoD,MAA3BuB,IACe,MAAtCA,EAAwB/B,aAC1BgE,EAAcjE,EACZoB,EACAY,EAAwB/B,aAG5BiE,EAAwBvD,EAAAA,cACtB,QACA,CACEsF,KAAMxF,EAAc0C,IACpB1B,OAAQO,EAAwB9B,EAChCsB,MAAOQ,EAAwB7B,EAC/BlM,EAAG+N,EAAwB/N,EAAI0L,EAC/BzL,EAAG8N,EAAwB9N,EAAIyL,EAC/BuG,oBAAqB,OACrBxE,QAASM,EAAwBN,QACjCI,YAAaE,EAAwBF,eAI3C,IAAMqE,EAASzG,EAAauE,EAAatE,GACzC,OAAuBgB,EAAAA,cACrB,MACA5P,EAAe,CACb0Q,OAAQzO,EACRwO,MAAOxO,EACPoT,QAAS,OAAFrP,OAASsK,EAAQ,KAAAtK,OAAIsK,GAC5BgE,IAAKhD,EACLiD,KAAM,OACLrC,KACD8C,GAAyBpF,EAAAA,cAAoB,QAAS,KAAMoF,GAC9CpF,EAAAA,cACd,OACA,CACEiE,KAAMlC,EACN2D,EAAG,SAAFtP,OAAWsK,EAAQ,KAAAtK,OAAIsK,EAAQ,OAChCiF,eAAgB,eAGJ3F,EAAAA,cAAoB,OAAQ,CAAEiE,KAAMhC,EAASyD,EAAGF,EAAQG,eAAgB,eACxFpC,EAEJ,IAEFsB,EAAUD,YAAc","sources":["../node_modules/qrcode.react/lib/esm/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class _QrCode {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code with the given version number,\n    // error correction level, data codeword bytes, and mask number.\n    // This is a low-level API that most users should not use directly.\n    // A mid-level API is the encodeSegments() function.\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      // The modules of this QR Code (false = light, true = dark).\n      // Immutable after constructor finishes. Accessed through getModule().\n      this.modules = [];\n      // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    /*-- Static factory functions (high level) --*/\n    // Returns a QR Code representing the given Unicode text string at the given error correction level.\n    // As a conservative upper bound, this function is guaranteed to succeed for strings that have 738 or fewer\n    // Unicode code points (not UTF-16 code units) if the low error correction level is used. The smallest possible\n    // QR Code version is automatically chosen for the output. The ECC level of the result may be higher than the\n    // ecl argument if it can be done without increasing the version.\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    // Returns a QR Code representing the given binary data at the given error correction level.\n    // This function always encodes using the binary segment mode, not any text mode. The maximum number of\n    // bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.\n    // The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a QR Code representing the given segments with the given encoding parameters.\n    // The smallest possible QR Code version within the given range is automatically\n    // chosen for the output. Iff boostEcl is true, then the ECC level of the result\n    // may be higher than the ecl argument if it can be done without increasing the\n    // version. The mask number is either between 0 to 7 (inclusive) to force that\n    // mask, or -1 to automatically choose an appropriate mask (which may be slow).\n    // This function allows the user to create a custom sequence of segments that switches\n    // between modes (such as alphanumeric and byte) to encode text in less space.\n    // This is a mid-level API; the high-level API is encodeText() and encodeBinary().\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    /*-- Accessor methods --*/\n    // Returns the color of the module (pixel) at the given coordinates, which is false\n    // for light or true for dark. The top left corner has the coordinates (x=0, y=0).\n    // If the given coordinates are out of bounds, then false (light) is returned.\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    // Modified to expose modules for easy access\n    getModules() {\n      return this.modules;\n    }\n    /*-- Private helper methods for constructor: Drawing function modules --*/\n    // Reads this object's version field, and draws and marks all function modules.\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    // Draws two copies of the format bits (with its own error correction code)\n    // based on the given mask and this object's error correction level field.\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    // Draws two copies of the version bits (with its own error correction code),\n    // based on this object's version field, iff 7 <= version <= 40.\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    // Draws a 9*9 finder pattern including the border separator,\n    // with the center module at (x, y). Modules can be out of bounds.\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    // Draws a 5*5 alignment pattern, with the center module\n    // at (x, y). All modules must be in bounds.\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    // Sets the color of a module and marks it as a function module.\n    // Only used by the constructor. Coordinates must be in bounds.\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    /*-- Private helper methods for constructor: Codewords and masking --*/\n    // Returns a new byte string representing the given data with the appropriate error correction\n    // codewords appended to it, based on this object's version and error correction level.\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire\n    // data area of this QR Code. Function modules need to be marked off before this is called.\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    // XORs the codeword modules in this QR Code with the given mask pattern.\n    // The function modules must be marked and the codeword bits must be drawn\n    // before masking. Due to the arithmetic of XOR, calling applyMask() with\n    // the same mask value a second time will undo the mask. A final well-formed\n    // QR Code needs exactly one (not zero, two, etc.) mask applied.\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    // Calculates and returns the penalty score based on state of this QR Code's current modules.\n    // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    /*-- Private helper functions --*/\n    // Returns an ascending list of positions of alignment patterns for this version number.\n    // Each position is in the range [0,177), and are used on both the x and y axes.\n    // This could be implemented as lookup table of 40 variable-length lists of integers.\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    // Returns the number of data bits that can be stored in a QR Code of the given version number, after\n    // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.\n    // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any\n    // QR Code of the given version number and error correction level, with remainder bits discarded.\n    // This stateless pure function could be implemented as a (40*4)-cell lookup table.\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be\n    // implemented as a lookup table over all possible parameter values, instead of as an algorithm.\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    // Returns the product of the two given field elements modulo GF(2^8/0x11D). The arguments and result\n    // are unsigned 8-bit integers. This could be implemented as a lookup table of 256*256 entries of uint8.\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    // Can only be called immediately after a light run is added, and\n    // returns either 0, 1, or 2. A helper function for getPenaltyScore().\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  /*-- Constants and tables --*/\n  // The minimum version number supported in the QR Code Model 2 standard.\n  _QrCode.MIN_VERSION = 1;\n  // The maximum version number supported in the QR Code Model 2 standard.\n  _QrCode.MAX_VERSION = 40;\n  // For use in getPenaltyScore(), when evaluating which mask is best.\n  _QrCode.PENALTY_N1 = 3;\n  _QrCode.PENALTY_N2 = 3;\n  _QrCode.PENALTY_N3 = 40;\n  _QrCode.PENALTY_N4 = 10;\n  _QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    // Low\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    // Medium\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    // Quartile\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n    // High\n  ];\n  _QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    // Version: (note that index 0 is for padding, and is set to an illegal value)\n    //0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40    Error correction level\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    // Low\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    // Medium\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    // Quartile\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n    // High\n  ];\n  let QrCode = _QrCode;\n  qrcodegen2.QrCode = _QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class _QrSegment {\n    /*-- Constructor (low level) and fields --*/\n    // Creates a new QR Code segment with the given attributes and data.\n    // The character count (numChars) must agree with the mode and the bit buffer length,\n    // but the constraint isn't checked. The given bit buffer is cloned and stored.\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    /*-- Static factory functions (mid level) --*/\n    // Returns a segment representing the given binary data encoded in\n    // byte mode. All input byte arrays are acceptable. Any text string\n    // can be converted to UTF-8 bytes and encoded as a byte mode segment.\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    // Returns a segment representing the given string of decimal digits encoded in numeric mode.\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substring(i, i + n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    // Returns a segment representing the given text string encoded in alphanumeric mode.\n    // The characters allowed are: 0 to 9, A to Z (uppercase only), space,\n    // dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    // Returns a new mutable list of zero or more segments to represent the given Unicode text string.\n    // The result may use various segment modes and switch modes to optimize the length of the bit stream.\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    // Returns a segment representing an Extended Channel Interpretation\n    // (ECI) designator with the given assignment value.\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    // Tests whether the given string can be encoded as a segment in numeric mode.\n    // A string is encodable iff each character is in the range 0 to 9.\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    // Tests whether the given string can be encoded as a segment in alphanumeric mode.\n    // A string is encodable iff each character is in the following set: 0 to 9, A to Z\n    // (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    /*-- Methods --*/\n    // Returns a new copy of the data bits of this segment.\n    getData() {\n      return this.bitData.slice();\n    }\n    // (Package-private) Calculates and returns the number of bits needed to encode the given segments at\n    // the given version. The result is infinity if a segment has too many characters to fit its length field.\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    // Returns a new array of bytes representing the given string encoded in UTF-8.\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substring(i + 1, i + 3), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  /*-- Constants --*/\n  // Describes precisely all strings that are encodable in numeric mode.\n  _QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  // Describes precisely all strings that are encodable in alphanumeric mode.\n  _QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  // The set of all legal characters in alphanumeric mode,\n  // where each character value maps to the index in the string.\n  _QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  let QrSegment = _QrSegment;\n  qrcodegen2.QrSegment = _QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class _Ecc {\n      // The QR Code can tolerate about 30% erroneous codewords\n      /*-- Constructor and fields --*/\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    /*-- Constants --*/\n    _Ecc.LOW = new _Ecc(0, 1);\n    // The QR Code can tolerate about  7% erroneous codewords\n    _Ecc.MEDIUM = new _Ecc(1, 0);\n    // The QR Code can tolerate about 15% erroneous codewords\n    _Ecc.QUARTILE = new _Ecc(2, 3);\n    // The QR Code can tolerate about 25% erroneous codewords\n    _Ecc.HIGH = new _Ecc(3, 2);\n    let Ecc = _Ecc;\n    QrCode2.Ecc = _Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class _Mode {\n      /*-- Constructor and fields --*/\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      /*-- Method --*/\n      // (Package-private) Returns the bit width of the character count field for a segment in\n      // this mode in a QR Code at the given version number. The result is in the range [0, 16].\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    /*-- Constants --*/\n    _Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    _Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    _Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    _Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    _Mode.ECI = new _Mode(7, [0, 0, 0]);\n    let Mode = _Mode;\n    QrSegment2.Mode = _Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar DEFAULT_MINVERSION = 1;\nvar SPEC_MARGIN_SIZE = 4;\nvar DEFAULT_MARGIN_SIZE = 0;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(\n          `M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`\n        );\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(\n            `M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`\n          );\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, margin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  const opacity = imageSettings.opacity == null ? 1 : imageSettings.opacity;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  const crossOrigin = imageSettings.crossOrigin;\n  return { x, y, h, w, excavation, opacity, crossOrigin };\n}\nfunction getMarginSize(includeMargin, marginSize) {\n  if (marginSize != null) {\n    return Math.max(Math.floor(marginSize), 0);\n  }\n  return includeMargin ? SPEC_MARGIN_SIZE : DEFAULT_MARGIN_SIZE;\n}\nfunction useQRCode({\n  value,\n  level,\n  minVersion,\n  includeMargin,\n  marginSize,\n  imageSettings,\n  size\n}) {\n  let qrcode = React.useMemo(() => {\n    const segments = qrcodegen_default.QrSegment.makeSegments(value);\n    return qrcodegen_default.QrCode.encodeSegments(\n      segments,\n      ERROR_LEVEL_MAP[level],\n      minVersion\n    );\n  }, [value, level, minVersion]);\n  const { cells, margin, numCells, calculatedImageSettings } = React.useMemo(() => {\n    let cells2 = qrcode.getModules();\n    const margin2 = getMarginSize(includeMargin, marginSize);\n    const numCells2 = cells2.length + margin2 * 2;\n    const calculatedImageSettings2 = getImageSettings(\n      cells2,\n      size,\n      margin2,\n      imageSettings\n    );\n    return {\n      cells: cells2,\n      margin: margin2,\n      numCells: numCells2,\n      calculatedImageSettings: calculatedImageSettings2\n    };\n  }, [qrcode, size, imageSettings, includeMargin, marginSize]);\n  return {\n    qrcode,\n    margin,\n    cells,\n    numCells,\n    calculatedImageSettings\n  };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nvar QRCodeCanvas = React.forwardRef(\n  function QRCodeCanvas2(props, forwardedRef) {\n    const _a = props, {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      marginSize,\n      imageSettings\n    } = _a, extraProps = __objRest(_a, [\n      \"value\",\n      \"size\",\n      \"level\",\n      \"bgColor\",\n      \"fgColor\",\n      \"includeMargin\",\n      \"minVersion\",\n      \"marginSize\",\n      \"imageSettings\"\n    ]);\n    const _b = extraProps, { style } = _b, otherProps = __objRest(_b, [\"style\"]);\n    const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n    const _canvas = React.useRef(null);\n    const _image = React.useRef(null);\n    const setCanvasRef = React.useCallback(\n      (node) => {\n        _canvas.current = node;\n        if (typeof forwardedRef === \"function\") {\n          forwardedRef(node);\n        } else if (forwardedRef) {\n          forwardedRef.current = node;\n        }\n      },\n      [forwardedRef]\n    );\n    const [isImgLoaded, setIsImageLoaded] = React.useState(false);\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n      value,\n      level,\n      minVersion,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      size\n    });\n    React.useEffect(() => {\n      if (_canvas.current != null) {\n        const canvas = _canvas.current;\n        const ctx = canvas.getContext(\"2d\");\n        if (!ctx) {\n          return;\n        }\n        let cellsToDraw = cells;\n        const image = _image.current;\n        const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n        if (haveImageToRender) {\n          if (calculatedImageSettings.excavation != null) {\n            cellsToDraw = excavateModules(\n              cells,\n              calculatedImageSettings.excavation\n            );\n          }\n        }\n        const pixelRatio = window.devicePixelRatio || 1;\n        canvas.height = canvas.width = size * pixelRatio;\n        const scale = size / numCells * pixelRatio;\n        ctx.scale(scale, scale);\n        ctx.fillStyle = bgColor;\n        ctx.fillRect(0, 0, numCells, numCells);\n        ctx.fillStyle = fgColor;\n        if (SUPPORTS_PATH2D) {\n          ctx.fill(new Path2D(generatePath(cellsToDraw, margin)));\n        } else {\n          cells.forEach(function(row, rdx) {\n            row.forEach(function(cell, cdx) {\n              if (cell) {\n                ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n              }\n            });\n          });\n        }\n        if (calculatedImageSettings) {\n          ctx.globalAlpha = calculatedImageSettings.opacity;\n        }\n        if (haveImageToRender) {\n          ctx.drawImage(\n            image,\n            calculatedImageSettings.x + margin,\n            calculatedImageSettings.y + margin,\n            calculatedImageSettings.w,\n            calculatedImageSettings.h\n          );\n        }\n      }\n    });\n    React.useEffect(() => {\n      setIsImageLoaded(false);\n    }, [imgSrc]);\n    const canvasStyle = __spreadValues({ height: size, width: size }, style);\n    let img = null;\n    if (imgSrc != null) {\n      img = /* @__PURE__ */ React.createElement(\n        \"img\",\n        {\n          src: imgSrc,\n          key: imgSrc,\n          style: { display: \"none\" },\n          onLoad: () => {\n            setIsImageLoaded(true);\n          },\n          ref: _image,\n          crossOrigin: calculatedImageSettings == null ? void 0 : calculatedImageSettings.crossOrigin\n        }\n      );\n    }\n    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\n      \"canvas\",\n      __spreadValues({\n        style: canvasStyle,\n        height: size,\n        width: size,\n        ref: setCanvasRef,\n        role: \"img\"\n      }, otherProps)\n    ), img);\n  }\n);\nQRCodeCanvas.displayName = \"QRCodeCanvas\";\nvar QRCodeSVG = React.forwardRef(\n  function QRCodeSVG2(props, forwardedRef) {\n    const _a = props, {\n      value,\n      size = DEFAULT_SIZE,\n      level = DEFAULT_LEVEL,\n      bgColor = DEFAULT_BGCOLOR,\n      fgColor = DEFAULT_FGCOLOR,\n      includeMargin = DEFAULT_INCLUDEMARGIN,\n      minVersion = DEFAULT_MINVERSION,\n      title,\n      marginSize,\n      imageSettings\n    } = _a, otherProps = __objRest(_a, [\n      \"value\",\n      \"size\",\n      \"level\",\n      \"bgColor\",\n      \"fgColor\",\n      \"includeMargin\",\n      \"minVersion\",\n      \"title\",\n      \"marginSize\",\n      \"imageSettings\"\n    ]);\n    const { margin, cells, numCells, calculatedImageSettings } = useQRCode({\n      value,\n      level,\n      minVersion,\n      includeMargin,\n      marginSize,\n      imageSettings,\n      size\n    });\n    let cellsToDraw = cells;\n    let image = null;\n    if (imageSettings != null && calculatedImageSettings != null) {\n      if (calculatedImageSettings.excavation != null) {\n        cellsToDraw = excavateModules(\n          cells,\n          calculatedImageSettings.excavation\n        );\n      }\n      image = /* @__PURE__ */ React.createElement(\n        \"image\",\n        {\n          href: imageSettings.src,\n          height: calculatedImageSettings.h,\n          width: calculatedImageSettings.w,\n          x: calculatedImageSettings.x + margin,\n          y: calculatedImageSettings.y + margin,\n          preserveAspectRatio: \"none\",\n          opacity: calculatedImageSettings.opacity,\n          crossOrigin: calculatedImageSettings.crossOrigin\n        }\n      );\n    }\n    const fgPath = generatePath(cellsToDraw, margin);\n    return /* @__PURE__ */ React.createElement(\n      \"svg\",\n      __spreadValues({\n        height: size,\n        width: size,\n        viewBox: `0 0 ${numCells} ${numCells}`,\n        ref: forwardedRef,\n        role: \"img\"\n      }, otherProps),\n      !!title && /* @__PURE__ */ React.createElement(\"title\", null, title),\n      /* @__PURE__ */ React.createElement(\n        \"path\",\n        {\n          fill: bgColor,\n          d: `M0,0 h${numCells}v${numCells}H0z`,\n          shapeRendering: \"crispEdges\"\n        }\n      ),\n      /* @__PURE__ */ React.createElement(\"path\", { fill: fgColor, d: fgPath, shapeRendering: \"crispEdges\" }),\n      image\n    );\n  }\n);\nQRCodeSVG.displayName = \"QRCodeSVG\";\nexport {\n  QRCodeCanvas,\n  QRCodeSVG\n};\n"],"names":["qrcodegen","qrcodegen2","__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","_step","_iterator","_createForOfIteratorHelper","s","n","done","err","e","f","__objRest","source","exclude","target","indexOf","_step2","_iterator2","_QrCode","version","errorCorrectionLevel","dataCodewords","msk","_classCallCheck","this","modules","isFunction","MIN_VERSION","MAX_VERSION","RangeError","size","row","i","push","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","_createClass","x","y","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","length","j","drawAlignmentPattern","drawVersion","data","formatBits","rem","bits","getBit","color","Math","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","ecl","getNumDataCodewords","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","_loop","_i9","forEach","block","right","vert","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","_step3","dark","_iterator3","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","core","currentRunColor","currentRunLength","pop","unshift","text","segs","QrSegment","makeSegments","encodeSegments","seg","makeBytes","dataUsedBits","minVersion","arguments","undefined","maxVersion","boostEcl","dataCapacityBits2","usedBits","getTotalBits","_i10","_arr","Ecc","MEDIUM","QUARTILE","HIGH","newEcl","_step4","bb","_iterator4","appendBits","mode","modeBits","numChars","numCharCountBits","_step5","_iterator5","getData","dataCapacityBits","min","padByte","degree","root","reedSolomonMultiply","divisor","_step6","map","_","_iterator6","_loop2","factor","shift","coef","z","val","len","cond","QrCode","_QrSegment","bitData","_step7","_iterator7","Mode","BYTE","digits","isNumeric","parseInt","substring","NUMERIC","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","makeNumeric","makeAlphanumeric","toUtf8ByteArray","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","_step8","_iterator8","ccbits","Infinity","str","encodeURI","charCodeAt","QrCode2","_Ecc","LOW","QrSegment2","_Mode","numBitsCharCount","KANJI","qrcodegen_default","ERROR_LEVEL_MAP","L","M","Q","H","DEFAULT_BGCOLOR","DEFAULT_FGCOLOR","SPEC_MARGIN_SIZE","DEFAULT_MARGIN_SIZE","DEFAULT_IMG_SCALE","generatePath","margin","ops","start","cell","join","excavateModules","excavation","h","w","useQRCode","_ref","level","includeMargin","marginSize","imageSettings","qrcode","React","segments","_React$useMemo","cells2","getModules","margin2","getMarginSize","numCells2","calculatedImageSettings2","cells","numCells","defaultSize","scale","width","height","opacity","excavate","floorX","floorY","crossOrigin","getImageSettings","calculatedImageSettings","SUPPORTS_PATH2D","Path2D","addPath","props","forwardedRef","_a","_a$size","_a$level","_a$bgColor","bgColor","_a$fgColor","fgColor","_a$includeMargin","_a$minVersion","_b","style","otherProps","imgSrc","src","_canvas","_image","setCanvasRef","node","current","_React$useState","_React$useState2","_slicedToArray","setIsImageLoaded","_useQRCode","canvas","ctx","getContext","cellsToDraw","image","haveImageToRender","complete","naturalHeight","naturalWidth","pixelRatio","window","devicePixelRatio","fillStyle","fillRect","fill","rdx","cdx","globalAlpha","drawImage","canvasStyle","img","display","onLoad","ref","role","displayName","QRCodeSVG","_a$size2","_a$level2","_a$bgColor2","_a$fgColor2","_a$includeMargin2","_a$minVersion2","title","_useQRCode2","href","preserveAspectRatio","fgPath","viewBox","d","shapeRendering"],"sourceRoot":""}