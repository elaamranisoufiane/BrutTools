{"version":3,"file":"static/js/673.131b433d.chunk.js","mappings":"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","sources":["pages/dashboradGuest/DevTools/UnitConverter.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nconst UnitConverter = () => {\r\n    const [fromUnit, setFromUnit] = useState('');\r\n    const [toUnit, setToUnit] = useState('');\r\n    const [value, setValue] = useState('');\r\n    const [result, setResult] = useState('');\r\n\r\n    const handleConvert = async () => {\r\n        const response = await fetch('/api/convert-unit', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ fromUnit, toUnit, value }),\r\n        });\r\n        const data = await response.json();\r\n        setResult(data.result);\r\n    };\r\n\r\n    const unitCategories = {\r\n        distance: ['km', 'm', 'cm', 'mm', 'miles', 'yd', 'ft', 'in'],\r\n        weight: ['kg', 'g', 'mg', 'lbs', 'oz'],\r\n        temperature: ['celsius', 'fahrenheit', 'kelvin'],\r\n        volume: ['L', 'mL', 'm³', 'gal', 'qt', 'pt', 'cup', 'fl oz'],\r\n        area: ['m²', 'ha', 'km²', 'ft²', 'ac', 'mi²'],\r\n        speed: ['km/h', 'm/s', 'mph', 'ft/s'],\r\n        energy: ['J', 'kJ', 'cal', 'kcal', 'BTU'],\r\n        power: ['W', 'kW', 'hp'],\r\n        pressure: ['Pa', 'kPa', 'bar', 'atm', 'psi']\r\n    };\r\n\r\n    const getCategory = (unit) => {\r\n        if (['km', 'm', 'cm', 'mm', 'miles', 'yd', 'ft', 'in'].includes(unit)) return 'distance';\r\n        if (['kg', 'g', 'mg', 'lbs', 'oz'].includes(unit)) return 'weight';\r\n        if (['celsius', 'fahrenheit', 'kelvin'].includes(unit)) return 'temperature';\r\n        if (['L', 'mL', 'm³', 'gal', 'qt', 'pt', 'cup', 'fl oz'].includes(unit)) return 'volume';\r\n        if (['m²', 'ha', 'km²', 'ft²', 'ac', 'mi²'].includes(unit)) return 'area';\r\n        if (['km/h', 'm/s', 'mph', 'ft/s'].includes(unit)) return 'speed';\r\n        if (['J', 'kJ', 'cal', 'kcal', 'BTU'].includes(unit)) return 'energy';\r\n        if (['W', 'kW', 'hp'].includes(unit)) return 'power';\r\n        if (['Pa', 'kPa', 'bar', 'atm', 'psi'].includes(unit)) return 'pressure';\r\n        return '';\r\n    };\r\n\r\n    const possibleToUnits = unitCategories[getCategory(fromUnit)] || [];\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>Free Unit Converter - Convert Between Various Units Instantly</title>\r\n                <meta name=\"description\" content=\"Convert between different units of measurement easily with our free unit converter tool.\" />\r\n            </Helmet>\r\n\r\n            <main className=\"max-w-3/4 h-full flex flex-col items-center min-h-screen p-2\">\r\n                <div className=\"container bg-white p-2 md:p-10 rounded-lg mx-auto flex-col\">\r\n                    <div className=\"max-w-2xl mx-auto mt-10 p-8 bg-gradient-to-br from-white-900 to-white-800 rounded-xl shadow-2xl\">\r\n                        <h1 className=\"text-4xl font-bold text-center mb-4 text-gray-800\">Unit Converter</h1>\r\n                        <p className=\"text-center text-gray-600 mb-8\">\r\n                            Convert between different units of measurement quickly and easily. Enter your value, select the units, and get the result instantly.\r\n                        </p>\r\n                        <div className=\"flex flex-col space-y-4\">\r\n                            {result && <p className=\"mt-4 text-center text-2xl font-bold text-green-800\">{value} {fromUnit} = {result} {toUnit}</p>}\r\n\r\n                            <input\r\n                                type=\"number\"\r\n                                value={value}\r\n                                onChange={(e) => setValue(e.target.value)}\r\n                                placeholder=\"Enter value\"\r\n                                className=\"w-full p-2 border rounded-md\"\r\n                            />\r\n\r\n                            <select\r\n                                value={fromUnit}\r\n                                onChange={(e) => {\r\n                                    const newFromUnit = e.target.value;\r\n                                    setFromUnit(newFromUnit);\r\n                                    setToUnit('');\r\n                                    setResult('');\r\n                                }}\r\n                                className=\"w-full p-2 border rounded-md\"\r\n                            >\r\n                                <option value=\"\" disabled>Select From Unit</option>\r\n                                <option value=\"km\">Kilometers (km)</option>\r\n                                <option value=\"m\">Meters (m)</option>\r\n                                <option value=\"cm\">Centimeters (cm)</option>\r\n                                <option value=\"mm\">Millimeters (mm)</option>\r\n                                <option value=\"miles\">Miles (mi)</option>\r\n                                <option value=\"yd\">Yards (yd)</option>\r\n                                <option value=\"ft\">Feet (ft)</option>\r\n                                <option value=\"in\">Inches (in)</option>\r\n                                <option value=\"kg\">Kilograms (kg)</option>\r\n                                <option value=\"g\">Grams (g)</option>\r\n                                <option value=\"mg\">Milligrams (mg)</option>\r\n                                <option value=\"lbs\">Pounds (lbs)</option>\r\n                                <option value=\"oz\">Ounces (oz)</option>\r\n                                <option value=\"celsius\">Celsius (°C)</option>\r\n                                <option value=\"fahrenheit\">Fahrenheit (°F)</option>\r\n                                <option value=\"kelvin\">Kelvin (K)</option>\r\n                                <option value=\"L\">Liters (L)</option>\r\n                                <option value=\"mL\">Milliliters (mL)</option>\r\n                                <option value=\"m³\">Cubic meters (m³)</option>\r\n                                <option value=\"gal\">Gallons (gal)</option>\r\n                                <option value=\"qt\">Quarts (qt)</option>\r\n                                <option value=\"pt\">Pints (pt)</option>\r\n                                <option value=\"cup\">Cups (cup)</option>\r\n                                <option value=\"fl oz\">Fluid ounces (fl oz)</option>\r\n                                <option value=\"m²\">Square meters (m²)</option>\r\n                                <option value=\"ha\">Hectares (ha)</option>\r\n                                <option value=\"km²\">Square kilometers (km²)</option>\r\n                                <option value=\"ft²\">Square feet (ft²)</option>\r\n                                <option value=\"ac\">Acres (ac)</option>\r\n                                <option value=\"mi²\">Square miles (mi²)</option>\r\n                                <option value=\"km/h\">Kilometers per hour (km/h)</option>\r\n                                <option value=\"m/s\">Meters per second (m/s)</option>\r\n                                <option value=\"mph\">Miles per hour (mph)</option>\r\n                                <option value=\"ft/s\">Feet per second (ft/s)</option>\r\n                                <option value=\"J\">Joules (J)</option>\r\n                                <option value=\"kJ\">Kilojoules (kJ)</option>\r\n                                <option value=\"cal\">Calories (cal)</option>\r\n                                <option value=\"kcal\">Kilocalories (kcal)</option>\r\n                                <option value=\"BTU\">British thermal units (BTU)</option>\r\n                                <option value=\"W\">Watts (W)</option>\r\n                                <option value=\"kW\">Kilowatts (kW)</option>\r\n                                <option value=\"hp\">Horsepower (hp)</option>\r\n                                <option value=\"Pa\">Pascals (Pa)</option>\r\n                                <option value=\"kPa\">Kilopascals (kPa)</option>\r\n                                <option value=\"bar\">Bar (bar)</option>\r\n                                <option value=\"atm\">Atmospheres (atm)</option>\r\n                                <option value=\"psi\">Pounds per square inch (psi)</option>\r\n                            </select>\r\n\r\n                            <select\r\n                                value={toUnit}\r\n                                onChange={(e) => { setToUnit(e.target.value); setResult('') }}\r\n                                className=\"w-full p-2 border rounded-md\"\r\n                                disabled={!fromUnit} // Disable if no fromUnit is selected\r\n                            >\r\n                                <option value=\"\" disabled>Select To Unit</option>\r\n                                {possibleToUnits.map(unit => (\r\n                                    <option key={unit} value={unit}>\r\n                                        {unitCategories[getCategory(fromUnit)].find(opt => opt === unit)}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n\r\n                            <button\r\n                                onClick={handleConvert}\r\n                                className=\"w-full bg-main-color hover:bg-blue-300 text-white font-bold py-2 px-4 rounded-lg\"\r\n                            >\r\n                                Convert\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"mt-10 max-w-2xl mx-auto text-center\">\r\n                        <h3 className=\"text-xl font-semibold mb-4 text-gray-800\">Effortless Unit Conversion!</h3>\r\n                        <p className=\"text-gray-600 mb-4\">\r\n                            Our unit converter allows you to easily convert between various units of measurement. Simply input your value, select the units, and get the conversion result instantly.\r\n                        </p>\r\n                        <p className=\"text-gray-600\">\r\n                            If you need any help or have questions, please <a href=\"mailto:javatp01@gmail.com\" className=\"text-blue-500 hover:underline\">contact us</a>. We're here to assist you!\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UnitConverter;\r\n"],"names":["_useState","useState","_useState2","_slicedToArray","fromUnit","setFromUnit","_useState3","_useState4","toUnit","setToUnit","_useState5","_useState6","value","setValue","_useState7","_useState8","result","setResult","handleConvert","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","data","wrap","_context","prev","next","fetch","method","headers","body","JSON","stringify","sent","json","stop","apply","arguments","unitCategories","distance","weight","temperature","volume","area","speed","energy","power","pressure","getCategory","unit","includes","possibleToUnits","_jsxs","_Fragment","children","Helmet","_jsx","name","content","className","type","onChange","e","target","placeholder","newFromUnit","disabled","map","find","opt","onClick","href"],"sourceRoot":""}